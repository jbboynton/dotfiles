" lightline
" A light and configurable statusline/tabline

Plug 'itchyny/lightline.vim'

" Adds ALE indicator to lightline
Plug 'maximbaz/lightline-ale'

" Lightline config
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'fugitive', 'filename', 'conflicted', 'modified', 'readonly' ],
  \             [ 'ctrlp' ],
  \             [ 'linter_errors', 'linter_warnings' ] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'filetype', 'fileencoding' ] ]
  \ },
  \ 'inactive': {
  \    'left': [ [ 'filename', 'conflicted' ] ]
  \ },
  \ 'component': {
  \   'readonly': '%{&readonly?"Ã—":""}',
  \ },
  \ 'component_function': {
  \   'fugitive': 'LightlineFugitive',
  \   'conflicted': 'LightlineConflicted',
  \   'filename': 'LightlineFilename',
  \   'ctrlp': 'CtrlPMark',
  \ },
  \ 'component_expand': {
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_warnings': 'lightline#ale#warnings',
  \ },
  \ 'component_type': {
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \ },
  \ }

function! LightlineFilename()
  return (&ft == 'vimfiler' ? vimfiler#get_status_string() :
  \  &ft == 'unite' ? unite#get_status_string() :
  \  &ft == 'vimshell' ? vimshell#get_status_string() :
  \ '' != expand('%:t') ? expand('%:t') : 'no name')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler' && exists('*FugitiveHead')
    return FugitiveHead()
  endif
  return ''
endfunction

function! LightlineConflicted()
  if &ft !~? 'vimfiler' && !empty(ConflictedVersion())
    return ConflictedVersion()
  endif
  return ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

" vim:ft=vim
